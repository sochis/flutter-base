# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  rules:
    # Required rules for maintaining code consistency and quality
    always_declare_return_types: true # Always specify return types in functions
    always_specify_types: true # Always specify types for variables and parameters
    prefer_final_fields: true # Prefer using `final` for fields that won't change
    prefer_final_locals: true # Prefer using `final` for local variables
    prefer_const_constructors: true # Prefer using `const` constructors for immutable widgets
    avoid_print: true # Avoid using `print` in production code
    avoid_redundant_argument_values: true # Avoid specifying redundant arguments with default values
    prefer_is_empty: true # Use `.isEmpty` instead of `length == 0` for collections
    avoid_implementing_value_types: true # Avoid implementing value types like String, int, etc.

    # Rules to enhance readability and maintain consistent code style
    camel_case_types: true # Use camelCase for class names (e.g., MyClassName)
    constant_identifier_names: true # Use uppercase snake_case for constant identifiers (e.g., MY_CONSTANT)
    prefer_single_quotes: true # Prefer single quotes over double quotes for strings
    prefer_typing_uninitialized_variables: true # Always specify the type for uninitialized variables

    # Error handling and best practices
    avoid_catching_errors: true # Avoid catching generic errors without proper handling

    # Rules to remove unnecessary or redundant code
    unnecessary_new: true # Avoid using the `new` keyword in Dart 2 and above
    avoid_dynamic_calls: true # Avoid using dynamic calls on objects when not necessary
    avoid_function_literals_in_foreach_calls: true # Avoid passing function literals directly to `forEach`

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

analyzer:
  plugins:
    - custom_lint
